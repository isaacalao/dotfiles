# Set PATH, MANPATH, etc., for Homebrew.
eval "$(/opt/homebrew/bin/brew shellenv)"

# Aliases
alias ..="cd .."
alias ls="eza --tree -L 1" # exa is no longer maintained
alias nc="ncat"
alias cat="bat"
alias clr="clear"
alias dirs="dirs -v"
alias tree="eza --tree"
alias nano="nano -l"
alias diff="diff --color=always"
alias grep="grep --color=always"
alias openvpn="sudo openvpn"
alias pbclear="pbcopy < /dev/null"

# Functions

wttr() { curl -s "https://wttr.in/${1}"; return $? }

chtsh() { IFS="/"; curl -s "https://cht.sh/${*}"; return $? }

mkcd() { mkdir -p "$@" && cd "$_";  return $? }

mknote() { vim ${@}; return $? }

editalias() { 
  vim "$HOME/.zshalias" && . "$HOME/.zshalias" \
	&& printf "\"%s\", updated and sourced.\n" "$(basename "${HOME}/.zshalias")";

  return $?
}

obsidian() { 
  local app_name="Obsidian"
  local obsidian_running="$(pgrep -q "${app_name}"; printf "${?}")"

  if [ $((obsidian_running)) -eq 0 ]; then
    killall "${app_name}"
  else
    open -a "${app_name}"
  fi

  return $?
}

keystroke() { 
  local app_name="Keystroke Pro" 
  local keystroke_running="$(pgrep -q "${app_name}"; printf "${?}")"
  
  if [ $((keystroke_running)) -eq 0 ]; then
    killall "${app_name}"
  else
    open -a "${app_name}"
  fi

  return $?
}

scrncap() {
    [ -f /usr/sbin/screencapture ] && { 
    local argcnt="${#@}"
    local ext="" argval="" red="\x1B[31m" green="\x1B[32m" faint="\x1B[2m" reset="\x1B[0m" 
    local options=( "${faint}"{video,audio,click}"${reset}" )
    readonly red green faint reset
    
    # E.g.,
    # SCRNCAP_ALL_OPT="true" scrncap "<file-name>"

    if [[ "${SCRNCAP_ALL_OPT}" = [tT][rR][uU][eE] ]]; then
      readonly local ALL_OPT="vgk"
      argcnt="$((${#ALL_OPT}+${#@}))"
      argval="${ALL_OPT}"
      options=( "${green}"{video,audio,click}"${reset}" )
    else
      for arg in ${@}; do
        [[ ${arg:0:1} == "v" && "${argval}" != *"v"* ]] && { options[1]="${green}video${reset}"; argval="${argval}${arg:0:1}"; continue; } || \
        [[ ${arg:0:1} == "a" && "${argval}" != *"g"* ]] && { options[2]="${green}audio${reset}"; argval="${argval}g"; continue; } || \
        [[ ${arg:0:1} == "c" && "${argval}" != *"k"*  ]] && { options[3]="${green}click${reset}"; argval="${argval}k"; continue; }
      done;
    fi

    if [[ "${argval}" == *"v"* ]]; then
      ext="mov"
    elif [[ "${argval}" == *[kg]* ]]; then
      ext="png"
    else
      return $?
    fi


    printf " 
      Options enabled: ${options[*]} -> ${argval:-${faint}NULL${reset}}  
      Extension: ${ext:-${faint}NULL${reset}}
    \n"

    [ ${#argval} -ge 1 ] && /usr/sbin/screencapture "-${argval}" "$([ ${#argval} -lt ${argcnt} ] && printf "%s" "${@[$#@]}" || date).${ext}" 

  }

  return $?
}

battery() {
  local bgclr="\x1B[30m" \
  ascii_bar_color=("\x1B[3"{1..3}"m") \
  ascii_bar=(▄ ▅ ▆ ▇ █) \
  residual="$(/usr/sbin/ioreg -c AppleSmartBattery -w0 | grep -w CurrentCapacity | tr -d " " | cut -d "=" -f2)"
      
  if test $residual -le 25; then
    printf "${bgclr}${ascii_bar_color[1]}[%s%%] %s\x1B[0m\n" "$residual" "${ascii_bar[1]}"
  elif [ $residual -gt 25 ] && [ $residual -lt 50 ]; then
    printf "${bgclr}${ascii_bar_color[3]}[%s%%] %s\x1B[0m\n" "$residual" "${ascii_bar[2]}"
  elif [ $residual -ge 50 ] && [ $residual -lt 75 ]; then
    printf "${bgclr}${ascii_bar_color[3]}[%s%%] %s\x1B[0m\n" "$residual" "${ascii_bar[3]}"
  elif [ $residual -ge 75 ] && [ $residual -lt 100 ]; then
    printf "${bgclr}${ascii_bar_color[2]}[%s%%] %s\x1B[0m\n" "$residual" "${ascii_bar[4]}"
  else
    printf "${bgclr}${ascii_bar_color[2]}[%s%%] %s\x1B[0m\n" "$residual" "${ascii_bar[5]}"
  fi 
  	
  return $?
}

vim() { 
  if [ -x "$(whereis nvim | awk '{ print $2 }')" ]; then
    if [ ${#@} -gt 0 ]; then
      nvim "${@}"
    else
      nvim "${PWD}"
    fi
    return ${?}
  else
    printf "nvim is not installed\n"
    return 127
  fi
}

# Old
# play_tune() {
#   tune=(/var/mp3/tunes/*);
#  
#   for idx in $(seq $#tune); 
#   do
#    [[ $(echo $tune[$idx] | grep "Chime2") ]] && (afplay $tune[$idx] &) > /dev/null 2>&1
#   done
#  
#   unset idx tune;
# }
